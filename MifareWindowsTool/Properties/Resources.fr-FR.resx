<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Abort" xml:space="preserve">
    <value>Arrêter</value>
  </data>
  <data name="Aborted" xml:space="preserve">
    <value>arrêté</value>
  </data>
  <data name="ADumpFile" xml:space="preserve">
    <value>Un fichier de dump</value>
  </data>
  <data name="AlreadyExists" xml:space="preserve">
    <value>existe déjà</value>
  </data>
  <data name="AutoScanTagRunning" xml:space="preserve">
    <value>La détection automatique de badges est démarrée</value>
  </data>
  <data name="AutoScanTagStopped" xml:space="preserve">
    <value>La détection automatique de badges est arrêtée</value>
  </data>
  <data name="BtnDeleteKeyFileContent" xml:space="preserve">
    <value>Supprimer le fichier de clés</value>
  </data>
  <data name="BtnEditKeyFileContent" xml:space="preserve">
    <value>Editer le fichier de clés</value>
  </data>
  <data name="BtnNewKeyFileContent" xml:space="preserve">
    <value>Nouveau fichier de clés</value>
  </data>
  <data name="btnOpenDumpAContent" xml:space="preserve">
    <value>Ouvrir le dump A</value>
  </data>
  <data name="btnOpenDumpBContent" xml:space="preserve">
    <value>Ouvrir le dump B</value>
  </data>
  <data name="BtnSelectDumpContent" xml:space="preserve">
    <value>Sélectionner le dump Source</value>
  </data>
  <data name="btnStartMappingAndReadTagContent" xml:space="preserve">
    <value>Démarrer le mapping et lire le badge</value>
  </data>
  <data name="BtnWriteDumpContent" xml:space="preserve">
    <value>Ecrire sur le badge</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>Annuler</value>
  </data>
  <data name="CkACsContent" xml:space="preserve">
    <value>Utiliser ces conditions d'accès pour tous les secteurs</value>
  </data>
  <data name="CkEnableBlock0WritingContent" xml:space="preserve">
    <value>Avançé : Autoriser l'écriture sur le bloc 0</value>
  </data>
  <data name="ckEnablePeriodicTagScanContent" xml:space="preserve">
    <value>Activer la détection périodique de badge</value>
  </data>
  <data name="ckEnablePeriodicTagScanTooltip" xml:space="preserve">
    <value>Vérifie toutes les 3 secondes si un nouveau badge est posé sur le lecteur</value>
  </data>
  <data name="Cloning" xml:space="preserve">
    <value>Duplication en cours</value>
  </data>
  <data name="Close" xml:space="preserve">
    <value>Fermer</value>
  </data>
  <data name="CompareDumps" xml:space="preserve">
    <value>Comparer les dumps</value>
  </data>
  <data name="Different" xml:space="preserve">
    <value>Différent</value>
  </data>
  <data name="DoneWithErrors" xml:space="preserve">
    <value>Terminé avec des erreurs</value>
  </data>
  <data name="DoYouWantToReUseThisDump" xml:space="preserve">
    <value>Voulez-vous réutiliser ce dump ?</value>
  </data>
  <data name="DumpExisting" xml:space="preserve">
    <value>Dump existant</value>
  </data>
  <data name="DumpFileFilter" xml:space="preserve">
    <value>Fichiers de Dump|*.dump;*.mfd;*.dmp;*.img|Tous les fichiers|*.*</value>
  </data>
  <data name="DumpWindowTitle" xml:space="preserve">
    <value>Dump</value>
  </data>
  <data name="EditAddKeyFile" xml:space="preserve">
    <value>EDITER/AJOUTER FICHIER DE CLES</value>
  </data>
  <data name="EditAnalyzeDumpFile" xml:space="preserve">
    <value>EDITER/ANALYSER FICHIER DUMP</value>
  </data>
  <data name="EditKeyFileWindowTitle" xml:space="preserve">
    <value>Edition des fichiers de clés</value>
  </data>
  <data name="FactoryFormat" xml:space="preserve">
    <value>Formatage d'usine</value>
  </data>
  <data name="Finished" xml:space="preserve">
    <value>terminé</value>
  </data>
  <data name="HelpAndInfo" xml:space="preserve">
    <value>AIDE/INFOS</value>
  </data>
  <data name="Identical" xml:space="preserve">
    <value>Identique</value>
  </data>
  <data name="KeyFilesFilter" xml:space="preserve">
    <value>Fichiers de clés|*.keys</value>
  </data>
  <data name="lblChooseKeyFileContent" xml:space="preserve">
    <value>Sélectionner un ou des fichier(s) de clés</value>
  </data>
  <data name="MapKeyToSectorWindowTitle" xml:space="preserve">
    <value>Schemas de clés</value>
  </data>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="MWT" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\MWT.ico;System.Drawing.Icon, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="NeedSelectDumpKeyFile" xml:space="preserve">
    <value>Vous devez selectionner au moins un fichier de dump/clés</value>
  </data>
  <data name="NeedToSelectOneKeyFile" xml:space="preserve">
    <value>Vous devez selectionner au moins un fichier de clés</value>
  </data>
  <data name="NewUIDFound" xml:space="preserve">
    <value>Nouvel UID trouvé</value>
  </data>
  <data name="NoTag" xml:space="preserve">
    <value>Aucun badge</value>
  </data>
  <data name="NoTagDetectedOnReader" xml:space="preserve">
    <value>Aucun badge détecté sur le lecteur</value>
  </data>
  <data name="OpenDump" xml:space="preserve">
    <value>Ouvrir un dump</value>
  </data>
  <data name="RbUseKeyAContent" xml:space="preserve">
    <value>Utiliser la clé A</value>
  </data>
  <data name="RbUseKeyBContent" xml:space="preserve">
    <value>Utiliser la clé B</value>
  </data>
  <data name="ReadTag" xml:space="preserve">
    <value>LIRE BADGE</value>
  </data>
  <data name="SaveDumpAs" xml:space="preserve">
    <value>Enregistrer le dump sous...</value>
  </data>
  <data name="SaveKeyFile" xml:space="preserve">
    <value>Enregistrer le dump</value>
  </data>
  <data name="ScanFinished" xml:space="preserve">
    <value>Détection terminée</value>
  </data>
  <data name="Sector" xml:space="preserve">
    <value>Secteur</value>
  </data>
  <data name="SelectKeyFilesWindowTitle" xml:space="preserve">
    <value>Fichiers de clés</value>
  </data>
  <data name="ShowAsASCII" xml:space="preserve">
    <value>Afficher en ASCII</value>
  </data>
  <data name="ShowAsHex" xml:space="preserve">
    <value>Afficher en Hexa</value>
  </data>
  <data name="SourceDump" xml:space="preserve">
    <value>dump Source :</value>
  </data>
  <data name="StartCloning" xml:space="preserve">
    <value>Démarrer la copie</value>
  </data>
  <data name="Started" xml:space="preserve">
    <value>démarré</value>
  </data>
  <data name="TargetDump" xml:space="preserve">
    <value>dump Cible :</value>
  </data>
  <data name="Tools" xml:space="preserve">
    <value>OUTILS</value>
  </data>
  <data name="UsedForSourceMapping" xml:space="preserve">
    <value>(utilisé pour le schéma du badge source)</value>
  </data>
  <data name="UsedForTargetMapping" xml:space="preserve">
    <value>(utilisé pour le schéma du badge cible)</value>
  </data>
  <data name="WriteDumpClone" xml:space="preserve">
    <value>Ecrire le dump (dupliquer)</value>
  </data>
  <data name="WriteDumpWindowTitle" xml:space="preserve">
    <value>Ecrire sur le badge</value>
  </data>
  <data name="WriteTag" xml:space="preserve">
    <value>ECRIRE BADGE</value>
  </data>
</root>